/* script file /home/carlo/cpp/SwiPlay/pqGraphvizTest/gallery/tree test.gv
 * created at Thu Nov 21 11:08:14 2013
 */
digraph tree_test {
	r -> a
/*
	subgraph cluster1 {
	r -> b
	}

*/	r -> b
	r -> c

	c -> d
	c -> è [label="hellò"]
	c [color=blue;tooltip="hèllo"]
	c -> è
	è -> c
}

/*
H

I've been pleasantly surprised by the quality of xdot rendering, using Graphviz as a library.
Actually, a simple translation from xdot output to Qt graphics primitives now yields a performant and accurate display of complex graphs.

There is still some minor point, but since all seems to works rather well, I was wondering if I could contribute my SW to the community.
It crosses Graphviz, Qt, and SWI-Prolog.

As title says, I'm looking for an hint about the right way to bypass the IO performed by xdot rendering and the subsequent parsing performed by libxdot.
My feeling indeed is that I could do just step into code where _ldraw_ etc are attached to edges, nodes, etc, and replace *there* with calls to scene graph building primitives,
hopefully with a noticeable gain in memory/time efficiency.

From cgraph documentation (libguide.pdf) seems to me that a gvrender_engine_t should be the appropriate tool, and from source /plugin/core/gvrender_core_dot.c I can see 
*/

/*
gvFreeLayout apparently doesn't clear completely the root Agraph_t*, since I get multiple 'boxes' (actually invisible, given resulting colors).
I do call gvFreeLayout between successive gvLayout,gvRender. I think could be a problem in libxdot. Here is the result of operation sequence

first call:
0xa0b540 _draw_ c 7 -#ffffff C 7 -#ffffff P 4 0 0 0 198 234 198 234 0
...

second call:
0xa0b540 _draw_ c 7 -#ffffff C 7 -#ffffff P 4 0 0 0 108 198 108 198 0 c 7 -#ffffff C 7 -#ffffff P 4 0 0 0 198 234 198 234 0  
...

third call:
0xa0b540 _draw_ c 7 -#ffffff C 7 -#ffffff P 4 0 0 0 36 54 36 54 0 c 7 -#ffffff C 7 -#ffffff P 4 0 0 0 108 198 108 198 0 c 7 -#ffffff C 7 -#ffffff P 4 0 0 0 198 234 198 234 0  
...

i.e. new bb boxes get inserted before older ones.

I have a workaround, but I'm concerned by memory limits in libxdot.

Thanks for your attention, Carlo
*/
